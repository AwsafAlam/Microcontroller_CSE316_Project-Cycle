
Bluetooth_USART_SERVO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  00000244  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000274  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000888  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000063b  00000000  00000000  00000bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000044f  00000000  00000000  000011f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000130  00000000  00000000  00001644  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f7  00000000  00000000  00001774  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001b0  00000000  00000000  00001b6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00001d1b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__vector_13>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 98 00 	call	0x130	; 0x130 <main>
  74:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <moveClockWise>:

void USART_TxChar(char data)                        /* Data transmitting function */
{
	UDR = data;                                     /* Write data to be transmitting in UDR */
	while (!(UCSRA & (1<<UDRE)));                   /* Wait until data transmit and buffer get empty */
}
  7c:	86 b5       	in	r24, 0x26	; 38
  7e:	97 b5       	in	r25, 0x27	; 39
  80:	88 57       	subi	r24, 0x78	; 120
  82:	95 40       	sbci	r25, 0x05	; 5
  84:	9b bd       	out	0x2b, r25	; 43
  86:	8a bd       	out	0x2a, r24	; 42
  88:	08 95       	ret

0000008a <moveAntiClockWise>:
  8a:	86 b5       	in	r24, 0x26	; 38
  8c:	97 b5       	in	r25, 0x27	; 39
  8e:	80 53       	subi	r24, 0x30	; 48
  90:	91 41       	sbci	r25, 0x11	; 17
  92:	9b bd       	out	0x2b, r25	; 43
  94:	8a bd       	out	0x2a, r24	; 42
  96:	08 95       	ret

00000098 <_resetServo>:
  98:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <TCCR1AVal>
  9c:	8f bd       	out	0x2f, r24	; 47
  9e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  a2:	8e bd       	out	0x2e, r24	; 46
  a4:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <ICR1Val>
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	97 bd       	out	0x27, r25	; 39
  ac:	86 bd       	out	0x26, r24	; 38
  ae:	08 95       	ret

000000b0 <_setServo>:
  b0:	8f b5       	in	r24, 0x2f	; 47
  b2:	82 6c       	ori	r24, 0xC2	; 194
  b4:	8f bd       	out	0x2f, r24	; 47
  b6:	8e b5       	in	r24, 0x2e	; 46
  b8:	89 61       	ori	r24, 0x19	; 25
  ba:	8e bd       	out	0x2e, r24	; 46
  bc:	8f e1       	ldi	r24, 0x1F	; 31
  be:	9e e4       	ldi	r25, 0x4E	; 78
  c0:	97 bd       	out	0x27, r25	; 39
  c2:	86 bd       	out	0x26, r24	; 38
  c4:	08 95       	ret

000000c6 <debugClockWise>:
  c6:	0e 94 58 00 	call	0xb0	; 0xb0 <_setServo>
  ca:	0e 94 3e 00 	call	0x7c	; 0x7c <moveClockWise>
  ce:	83 e2       	ldi	r24, 0x23	; 35
  d0:	94 ef       	ldi	r25, 0xF4	; 244
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <debugClockWise+0xc>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <debugClockWise+0x12>
  d8:	00 00       	nop
  da:	0e 94 4c 00 	call	0x98	; 0x98 <_resetServo>
  de:	08 95       	ret

000000e0 <ServoInit>:
  e0:	8f b5       	in	r24, 0x2f	; 47
  e2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <TCCR1AVal>
  e6:	8e b5       	in	r24, 0x2e	; 46
  e8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
  ec:	86 b5       	in	r24, 0x26	; 38
  ee:	97 b5       	in	r25, 0x27	; 39
  f0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <ICR1Val>
  f4:	08 95       	ret

000000f6 <debugAntiClockWise>:
  f6:	0e 94 58 00 	call	0xb0	; 0xb0 <_setServo>
  fa:	0e 94 45 00 	call	0x8a	; 0x8a <moveAntiClockWise>
  fe:	83 e2       	ldi	r24, 0x23	; 35
 100:	94 ef       	ldi	r25, 0xF4	; 244
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <debugAntiClockWise+0xc>
 106:	00 c0       	rjmp	.+0      	; 0x108 <debugAntiClockWise+0x12>
 108:	00 00       	nop
 10a:	0e 94 4c 00 	call	0x98	; 0x98 <_resetServo>
 10e:	08 95       	ret

00000110 <UART_init>:
 110:	82 e0       	ldi	r24, 0x02	; 2
 112:	8b b9       	out	0x0b, r24	; 11
 114:	8a b1       	in	r24, 0x0a	; 10
 116:	88 69       	ori	r24, 0x98	; 152
 118:	8a b9       	out	0x0a, r24	; 10
 11a:	80 b5       	in	r24, 0x20	; 32
 11c:	86 68       	ori	r24, 0x86	; 134
 11e:	80 bd       	out	0x20, r24	; 32
 120:	8c e0       	ldi	r24, 0x0C	; 12
 122:	89 b9       	out	0x09, r24	; 9
 124:	10 bc       	out	0x20, r1	; 32
 126:	08 95       	ret

00000128 <UART_send>:
 128:	5d 9b       	sbis	0x0b, 5	; 11
 12a:	fe cf       	rjmp	.-4      	; 0x128 <UART_send>
 12c:	8c b9       	out	0x0c, r24	; 12
 12e:	08 95       	ret

00000130 <main>:
#include "UART.h"


int main(void)
{
	DDRA = 0x0F;
 130:	8f e0       	ldi	r24, 0x0F	; 15
 132:	8a bb       	out	0x1a, r24	; 26
	DDRD = 0XFF;
 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	81 bb       	out	0x11, r24	; 17
	PORTA = 0xFF;
 138:	8b bb       	out	0x1b, r24	; 27
	
	ServoInit();
 13a:	0e 94 70 00 	call	0xe0	; 0xe0 <ServoInit>
	UART_init(9600);
 13e:	60 e8       	ldi	r22, 0x80	; 128
 140:	75 e2       	ldi	r23, 0x25	; 37
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 88 00 	call	0x110	; 0x110 <UART_init>
	
	sei();
 14a:	78 94       	sei
 14c:	ff cf       	rjmp	.-2      	; 0x14c <main+0x1c>

0000014e <__vector_13>:
	}
	
}

ISR (USART_RXC_vect)
{
 14e:	1f 92       	push	r1
 150:	0f 92       	push	r0
 152:	0f b6       	in	r0, 0x3f	; 63
 154:	0f 92       	push	r0
 156:	11 24       	eor	r1, r1
 158:	2f 93       	push	r18
 15a:	3f 93       	push	r19
 15c:	4f 93       	push	r20
 15e:	5f 93       	push	r21
 160:	6f 93       	push	r22
 162:	7f 93       	push	r23
 164:	8f 93       	push	r24
 166:	9f 93       	push	r25
 168:	af 93       	push	r26
 16a:	bf 93       	push	r27
 16c:	cf 93       	push	r28
 16e:	ef 93       	push	r30
 170:	ff 93       	push	r31
	uint8_t oldsrg = SREG;
 172:	cf b7       	in	r28, 0x3f	; 63
	
	cli();
 174:	f8 94       	cli
	char data = UDR;
 176:	8c b1       	in	r24, 0x0c	; 12
	PORTA = 0xF0;
 178:	90 ef       	ldi	r25, 0xF0	; 240
 17a:	9b bb       	out	0x1b, r25	; 27
	
	if(data=='1'){
 17c:	81 33       	cpi	r24, 0x31	; 49
 17e:	39 f4       	brne	.+14     	; 0x18e <__vector_13+0x40>
		PORTA |= (1<<PORTA0);
 180:	d8 9a       	sbi	0x1b, 0	; 27
		debugClockWise();
 182:	0e 94 63 00 	call	0xc6	; 0xc6 <debugClockWise>
		UART_send(data) ;
 186:	81 e3       	ldi	r24, 0x31	; 49
 188:	0e 94 94 00 	call	0x128	; 0x128 <UART_send>
 18c:	0c c0       	rjmp	.+24     	; 0x1a6 <__vector_13+0x58>
	}
	else if(data=='0'){
 18e:	80 33       	cpi	r24, 0x30	; 48
 190:	39 f4       	brne	.+14     	; 0x1a0 <__vector_13+0x52>
		PORTA |= (1<<PORTA1);
 192:	d9 9a       	sbi	0x1b, 1	; 27
		debugAntiClockWise();
 194:	0e 94 7b 00 	call	0xf6	; 0xf6 <debugAntiClockWise>
		UART_send(data) ;
 198:	80 e3       	ldi	r24, 0x30	; 48
 19a:	0e 94 94 00 	call	0x128	; 0x128 <UART_send>
 19e:	03 c0       	rjmp	.+6      	; 0x1a6 <__vector_13+0x58>
	}
	else{
		PORTA |= (1<<PORTA2);
 1a0:	da 9a       	sbi	0x1b, 2	; 27
		UART_send(data) ;
 1a2:	0e 94 94 00 	call	0x128	; 0x128 <UART_send>
	}
	
	SREG = oldsrg;
 1a6:	cf bf       	out	0x3f, r28	; 63
 1a8:	ff 91       	pop	r31
 1aa:	ef 91       	pop	r30
 1ac:	cf 91       	pop	r28
 1ae:	bf 91       	pop	r27
 1b0:	af 91       	pop	r26
 1b2:	9f 91       	pop	r25
 1b4:	8f 91       	pop	r24
 1b6:	7f 91       	pop	r23
 1b8:	6f 91       	pop	r22
 1ba:	5f 91       	pop	r21
 1bc:	4f 91       	pop	r20
 1be:	3f 91       	pop	r19
 1c0:	2f 91       	pop	r18
 1c2:	0f 90       	pop	r0
 1c4:	0f be       	out	0x3f, r0	; 63
 1c6:	0f 90       	pop	r0
 1c8:	1f 90       	pop	r1
 1ca:	18 95       	reti

000001cc <_exit>:
 1cc:	f8 94       	cli

000001ce <__stop_program>:
 1ce:	ff cf       	rjmp	.-2      	; 0x1ce <__stop_program>
