
Bluetooth_USART_Interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000192  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001e6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000728  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000600  00000000  00000000  000009bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000310  00000000  00000000  00000fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  000012cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037d  00000000  00000000  00001350  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001a5  00000000  00000000  000016cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001872  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__vector_13>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 64 00 	call	0xc8	; 0xc8 <main>
  64:	0c 94 c7 00 	jmp	0x18e	; 0x18e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <USART_Init>:

void USART_TxChar(char data)						/* Data transmitting function */
{
	UDR = data;										/* Write data to be transmitting in UDR */
	while (!(UCSRA & (1<<UDRE)));					/* Wait until data transmit and buffer get empty */
}
  6c:	2a b1       	in	r18, 0x0a	; 10
  6e:	28 69       	ori	r18, 0x98	; 152
  70:	2a b9       	out	0x0a, r18	; 10
  72:	20 b5       	in	r18, 0x20	; 32
  74:	26 68       	ori	r18, 0x86	; 134
  76:	20 bd       	out	0x20, r18	; 32
  78:	dc 01       	movw	r26, r24
  7a:	cb 01       	movw	r24, r22
  7c:	88 0f       	add	r24, r24
  7e:	99 1f       	adc	r25, r25
  80:	aa 1f       	adc	r26, r26
  82:	bb 1f       	adc	r27, r27
  84:	88 0f       	add	r24, r24
  86:	99 1f       	adc	r25, r25
  88:	aa 1f       	adc	r26, r26
  8a:	bb 1f       	adc	r27, r27
  8c:	9c 01       	movw	r18, r24
  8e:	ad 01       	movw	r20, r26
  90:	22 0f       	add	r18, r18
  92:	33 1f       	adc	r19, r19
  94:	44 1f       	adc	r20, r20
  96:	55 1f       	adc	r21, r21
  98:	22 0f       	add	r18, r18
  9a:	33 1f       	adc	r19, r19
  9c:	44 1f       	adc	r20, r20
  9e:	55 1f       	adc	r21, r21
  a0:	60 e0       	ldi	r22, 0x00	; 0
  a2:	72 e1       	ldi	r23, 0x12	; 18
  a4:	8a e7       	ldi	r24, 0x7A	; 122
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	0e 94 a5 00 	call	0x14a	; 0x14a <__udivmodsi4>
  ac:	8f ef       	ldi	r24, 0xFF	; 255
  ae:	82 0f       	add	r24, r18
  b0:	89 b9       	out	0x09, r24	; 9
  b2:	da 01       	movw	r26, r20
  b4:	c9 01       	movw	r24, r18
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	a1 09       	sbc	r26, r1
  ba:	b1 09       	sbc	r27, r1
  bc:	89 2f       	mov	r24, r25
  be:	9a 2f       	mov	r25, r26
  c0:	ab 2f       	mov	r26, r27
  c2:	bb 27       	eor	r27, r27
  c4:	80 bd       	out	0x20, r24	; 32
  c6:	08 95       	ret

000000c8 <main>:

int main(void)
{
	
	DDRA = 0xFF;
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	8a bb       	out	0x1a, r24	; 26
	PORTA |= (1<<PORTA1);
  cc:	d9 9a       	sbi	0x1b, 1	; 27
	USART_Init(9600);                /* initialize USART with 9600 baud rate */
  ce:	60 e8       	ldi	r22, 0x80	; 128
  d0:	75 e2       	ldi	r23, 0x25	; 37
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 36 00 	call	0x6c	; 0x6c <USART_Init>
	sei();
  da:	78 94       	sei
	
	while (1) 
    {
    PORTA |= (1<<PORTA1);
  dc:	d9 9a       	sbi	0x1b, 1	; 27
  de:	fe cf       	rjmp	.-4      	; 0xdc <main+0x14>

000000e0 <__vector_13>:
	
	}
}

ISR (USART_RXC_vect)
{
  e0:	1f 92       	push	r1
  e2:	0f 92       	push	r0
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	0f 92       	push	r0
  e8:	11 24       	eor	r1, r1
  ea:	2f 93       	push	r18
  ec:	3f 93       	push	r19
  ee:	8f 93       	push	r24
  f0:	9f 93       	push	r25
	uint8_t oldsrg = SREG;
  f2:	8f b7       	in	r24, 0x3f	; 63
	cli();
  f4:	f8 94       	cli
	char received_char = UDR;
  f6:	9c b1       	in	r25, 0x0c	; 12
	
	PORTA = received_char;
  f8:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fa:	2f ef       	ldi	r18, 0xFF	; 255
  fc:	34 e3       	ldi	r19, 0x34	; 52
  fe:	9c e0       	ldi	r25, 0x0C	; 12
 100:	21 50       	subi	r18, 0x01	; 1
 102:	30 40       	sbci	r19, 0x00	; 0
 104:	90 40       	sbci	r25, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <__vector_13+0x20>
 108:	00 c0       	rjmp	.+0      	; 0x10a <__vector_13+0x2a>
 10a:	00 00       	nop
	_delay_ms(500);
	
	PORTA= 0xFF;
 10c:	9f ef       	ldi	r25, 0xFF	; 255
 10e:	9b bb       	out	0x1b, r25	; 27
 110:	2f ef       	ldi	r18, 0xFF	; 255
 112:	34 e3       	ldi	r19, 0x34	; 52
 114:	9c e0       	ldi	r25, 0x0C	; 12
 116:	21 50       	subi	r18, 0x01	; 1
 118:	30 40       	sbci	r19, 0x00	; 0
 11a:	90 40       	sbci	r25, 0x00	; 0
 11c:	e1 f7       	brne	.-8      	; 0x116 <__vector_13+0x36>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <__vector_13+0x40>
 120:	00 00       	nop
	_delay_ms(500);
	
	PORTA= 0x00;
 122:	1b ba       	out	0x1b, r1	; 27
 124:	2f ef       	ldi	r18, 0xFF	; 255
 126:	34 e3       	ldi	r19, 0x34	; 52
 128:	9c e0       	ldi	r25, 0x0C	; 12
 12a:	21 50       	subi	r18, 0x01	; 1
 12c:	30 40       	sbci	r19, 0x00	; 0
 12e:	90 40       	sbci	r25, 0x00	; 0
 130:	e1 f7       	brne	.-8      	; 0x12a <__vector_13+0x4a>
 132:	00 c0       	rjmp	.+0      	; 0x134 <__vector_13+0x54>
 134:	00 00       	nop
	_delay_ms(500);
	
	
	SREG = oldsrg;
 136:	8f bf       	out	0x3f, r24	; 63
 138:	9f 91       	pop	r25
 13a:	8f 91       	pop	r24
 13c:	3f 91       	pop	r19
 13e:	2f 91       	pop	r18
 140:	0f 90       	pop	r0
 142:	0f be       	out	0x3f, r0	; 63
 144:	0f 90       	pop	r0
 146:	1f 90       	pop	r1
 148:	18 95       	reti

0000014a <__udivmodsi4>:
 14a:	a1 e2       	ldi	r26, 0x21	; 33
 14c:	1a 2e       	mov	r1, r26
 14e:	aa 1b       	sub	r26, r26
 150:	bb 1b       	sub	r27, r27
 152:	fd 01       	movw	r30, r26
 154:	0d c0       	rjmp	.+26     	; 0x170 <__udivmodsi4_ep>

00000156 <__udivmodsi4_loop>:
 156:	aa 1f       	adc	r26, r26
 158:	bb 1f       	adc	r27, r27
 15a:	ee 1f       	adc	r30, r30
 15c:	ff 1f       	adc	r31, r31
 15e:	a2 17       	cp	r26, r18
 160:	b3 07       	cpc	r27, r19
 162:	e4 07       	cpc	r30, r20
 164:	f5 07       	cpc	r31, r21
 166:	20 f0       	brcs	.+8      	; 0x170 <__udivmodsi4_ep>
 168:	a2 1b       	sub	r26, r18
 16a:	b3 0b       	sbc	r27, r19
 16c:	e4 0b       	sbc	r30, r20
 16e:	f5 0b       	sbc	r31, r21

00000170 <__udivmodsi4_ep>:
 170:	66 1f       	adc	r22, r22
 172:	77 1f       	adc	r23, r23
 174:	88 1f       	adc	r24, r24
 176:	99 1f       	adc	r25, r25
 178:	1a 94       	dec	r1
 17a:	69 f7       	brne	.-38     	; 0x156 <__udivmodsi4_loop>
 17c:	60 95       	com	r22
 17e:	70 95       	com	r23
 180:	80 95       	com	r24
 182:	90 95       	com	r25
 184:	9b 01       	movw	r18, r22
 186:	ac 01       	movw	r20, r24
 188:	bd 01       	movw	r22, r26
 18a:	cf 01       	movw	r24, r30
 18c:	08 95       	ret

0000018e <_exit>:
 18e:	f8 94       	cli

00000190 <__stop_program>:
 190:	ff cf       	rjmp	.-2      	; 0x190 <__stop_program>
